日志的用途：
    1）解决系统方面错误
    2）解决网络方面的问题
    3）记录重要的历史事件
    4）解决安全方面的问题   
    
日志的种类
    1、系统自带的应用日志    /var/log/messages
    2、文件系统日志             ext3/ext4/xfs            
    3、应用程序自带日志       ssh、http等服务都有相应的日志
    
Linux系统日志默认存放位置   /var/log

Linux常见日志文件
     messages            最重要的系统日志，几乎所有的系统错误信息都会记录在此  ****
     cron                    计划任务相关的日志
     secure                 安全相关的日志(需要输入用户名密码的软件，比如ssh、su等)
     maillog					与邮件服务器相关的消息日志
     boot.log               记录系统启动信息
     dmesg                 内核检测过程中产生的各种信息，硬件检测信息
     lastlog                 所有账户最近一次登录系统的相关信息 lastlog
     wtmp                  记录的是正确登录的人的信息，可以用last来查看
     btmp                   登录失败日志lastb

服务自己管理日志：
    httpd     web服务相关日志  apache    //access_log  error_log 访问和错误日志信息
    samba    samba服务日志
    xferlog    vsftpd服务日志   
# tail -0f /var/log/secure
Aug  3 12:14:03 server150 su: pam_unix(su-l:auth): authentication failure; logname=root uid=500 euid=0 tty=pts/5 ruser=test rhost=  user=root

Aug  3 12:14:03 ：事件发生的时间
server150：记录主机名
su:触发事件的应用程序
pam_unix(su-l:auth): authentication failure; ：事件的说明


日志轮转：日志的轮替、日志的轮转
为什么要轮转？
1）防止日志文件过大
2）定期清除日志 

日志轮转的配置文件
# vim /etc/logrotate.conf
weekly                          //轮转的周期，一周一轮转
rotate 4                         //保留几个旧的日志文件，类似于备份
create                            //当转储后文件不存在时创建
dateext                           //使用日期作为旧日志的后缀
include /etc/logrotate.d     //包含该路径下的所有配置文件
/var/log/wtmp {               //针对特定的日志进行定制设置
monthly                      //轮滚周期，一个月
create 0664 root utmp   //创建新的日志文件  权限664 所有者root 所属组utmp
minsize 1M                  //轮滚的最小大小是1M
rotate 1                      
}
/var/log/btmp {
missingok               //如果日志文件丢失，不要显示错误
monthly
create 0600 root utmpnibu
rotate 1
}

# cat /etc/logrotate.d/nginx
/var/log/nginx/*log {
    create 0664 nginx root
    daily
    rotate 3
    size 1    //（>= 5 个字节就转储）
    missingok
    notifempty   //当日志文件为空时，不进行轮转
    compress     //通过gzip 压缩转储以后的日志
    sharedscripts   //运行postrotate脚本
    postrotate    //在logrotate转储之后需要执行的指令，必须独立成行
        /bin/kill -USR1 `cat /run/nginx.pid 2>/dev/null` 2>/dev/null || true
    endscript   //结束指令
}


https://www.linuxidc.com/Linux/2019-02/157099.htm
